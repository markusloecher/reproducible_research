if (k == 1){
oob_index <- which(index)
if (returnTrees) shap_vals_oob[oob_index,,i] <- shap_vals_step
else shap_vals_oob[oob_index,] <- shap_vals_oob[oob_index,] + shap_vals_step
}
else{
if (returnTrees) shap_vals_in[index,,i] <- shap_vals_step
else shap_vals_in[index,] <- shap_vals_in[index,] + shap_vals_step
}
}
}
#only bookkeeping, so the output format is the same as for original treeshap
interactions_array <- NULL
if (returnTrees) {
treeshap_obj_in <- list(shaps = shap_vals_in, interactions = interactions_array,
unified_model = unified_model, observations = x)
treeshap_obj_oob <- list(shaps = shap_vals_oob, interactions = interactions_array,
unified_model = unified_model, observations = x)
} else {
treeshap_obj_in <- list(shaps = as.data.frame(shap_vals_in), interactions = interactions_array,
unified_model = unified_model, observations = x)
treeshap_obj_oob <- list(shaps = as.data.frame(shap_vals_oob), interactions = interactions_array,
unified_model = unified_model, observations = x)
}
class(treeshap_obj_in) <- "treeshap"
class(treeshap_obj_oob) <- "treeshap"
#instead of one treeshap object, we get a list of two. One for the inbag data and one for the oob data
return(list(inbag=treeshap_obj_in,oob=treeshap_obj_oob))
}
}
#inbag/oob treeshap calculation for smoothing
treeshap_obj = treewise_shap(unified,data,rf_inbag = rf_model$inbag.counts,returnTrees = F)
#inbag/oob treeshap calculation for smoothing
treeshap_obj = treewise_shap(unified,data,rf_inbag = rf_model$inbag.counts,returnTrees = T)
View(treeshap_obj)
#inbag/oob treeshap calculation for smoothing
treeshap_obj = treewise_shap(unified,data,rf_inbag = rf_model$inbag.counts,returnTrees = F)
#inbag/oob treeshap calculation for smoothing
treeshap_obj = treewise_shap(unified,data,rf_inbag = rf_model$inbag.counts,returnTrees = T)
View(treeshap_obj)
data_simulation <- function(n = 120, M = 100, relevance = 0.15){
time = Sys.time()
shap_vals = shap_avs = shap_avs_oob = shap_avs_in= shap_vals_oob = shap_vals_in = data.frame(x1 = NA,x2 = NA,x3 =NA,x4=NA,x5=NA)
for (i in 1:M){
ntree = 100
max_depth = 50
data = data.frame(x1 = rnorm(n),
x2 = sample(2,n,replace=T),
x3 = sample(4,n,replace=T),
x4 = sample(10,n,replace=T),
x5 = sample(20,n,replace=T))
data$y = rbinom(n,1,0.5+(c(-1,1)[data$x2]*relevance))
suppressWarnings(rf_model <- ranger(
formula = y ~ .,
data = data,
num.trees = ntree,
importance = "impurity",
keep.inbag = T,
max.depth = max_depth,
seed = 123,
classification = T
))
unified = ranger.unify(rf_model,data)
#inbag/oob treeshap calculation for smoothing
treeshap_obj = treewise_shap(unified,data,rf_inbag = rf_model$inbag.counts,returnTrees = T)
shap_vals_in_sim = treeshap_obj[[1]]$shaps[,-6]
shap_vals_oob_sim = treeshap_obj[[2]]$shaps[,-6]
shap_avs_oob_sim <- shap_vals_oob_sim %>% abs() %>% colMeans()
shap_avs_in_sim <- shap_vals_in_sim %>% abs() %>% colMeans()
shap_vals_oob <- rbind(shap_vals_oob,shap_vals_oob_sim)
shap_vals_in <- rbind(shap_vals_in,shap_vals_in_sim)
shap_avs_oob <- rbind(shap_avs_oob,shap_avs_oob_sim)
shap_avs_in <- rbind(shap_avs_in,shap_avs_in_sim)
###Raw treeshap calculation with original treeshap::treeshap function
shap_obj = treeshap(unified,data)
shap_vals_sim = shap_obj$shaps[,-6]
shap_avs_sim = shap_vals_sim %>% abs() %>% colMeans()
shap_vals = rbind(shap_vals,shap_vals_sim)
shap_avs = rbind(shap_avs,shap_avs_sim)
}
print(Sys.time()-time)
return(list(shap_vals_oob[-1,],shap_vals_in[-1,],shap_avs_oob[-1,],shap_avs_in[-1,],shap_vals[-1,],shap_avs[-1,]))
}
data_simulation_traintest <- function(n = 120, relevance = 0.15,M = 100){
ntree = 100
max_depth = 50
cor1a=cor2a= matrix(0,nrow=M,ncol=5)
shaps_out = shaps_in = data.frame(x1 = NA,x2 = NA,x3 =NA,x4=NA,x5=NA)
for (i in 1:M){
data = data.frame(x1 = rnorm(n),
x2 = sample(2,n,replace=T),
x3 = sample(4,n,replace=T),
x4 = sample(10,n,replace=T),
x5 = sample(20,n,replace=T))
data$y = rbinom(n,1,0.5+(c(-1,1)[data$x2]*relevance))
#split_temp = sample(1:n,round(0.5*n))
#split = 1:n %in% split_temp
split = 1:round(n/2)
split2 = (round(n/2)+1):n
#print(sum(split))
train = data[split,]
test = data[split2,]
rf_train <- ranger(
formula = y ~ .,
data = train,
num.trees = ntree,
max.depth = max_depth,
classification = T
)
rf_test <- ranger(
formula = y ~ .,
data = test,
num.trees = ntree,
max.depth = max_depth,
classification = T
)
unif_train = ranger.unify(rf_train,train)
unif_test = ranger.unify(rf_test,test)
#inbag/oob treeshap calculation for smoothing
shap_test_in = treewise_shap(unif_test,test)
shap_test_out = treewise_shap(unif_train,test)
shap_train = treewise_shap(unif_train,train)
for (j in 1:5) {
cor1a[i,j] = cor(shap_test_in$shaps[,j],shap_test_out$shaps[,j])
cor2a[i,j] = cor(shap_train$shaps[,j],shap_test_in$shaps[,j])
}
shaps_in = rbind(shaps_in,shap_test_in$shaps[,-6])
shaps_out = rbind(shaps_out,shap_test_out$shaps[,-6])
}
return(list(cor1a,cor2a,shaps_in[-1,],shaps_out[-1,]))
}
power_sim = data_simulation(n = 120,M = 10,relevance = 0.15)
data_simulation <- function(n = 120, M = 100, relevance = 0.15){
time = Sys.time()
shap_vals = shap_avs = shap_avs_oob = shap_avs_in= shap_vals_oob = shap_vals_in = data.frame(x1 = NA,x2 = NA,x3 =NA,x4=NA,x5=NA)
for (i in 1:M){
ntree = 100
max_depth = 50
data = data.frame(x1 = rnorm(n),
x2 = sample(2,n,replace=T),
x3 = sample(4,n,replace=T),
x4 = sample(10,n,replace=T),
x5 = sample(20,n,replace=T))
data$y = rbinom(n,1,0.5+(c(-1,1)[data$x2]*relevance))
suppressWarnings(rf_model <- ranger(
formula = y ~ .,
data = data,
num.trees = ntree,
importance = "impurity",
keep.inbag = T,
max.depth = max_depth,
seed = 123,
classification = T
))
unified = ranger.unify(rf_model,data)
#inbag/oob treeshap calculation for smoothing
treeshap_obj = treewise_shap(unified,data,rf_inbag = rf_model$inbag.counts)
shap_vals_in_sim = treeshap_obj[[1]]$shaps[,-6]
shap_vals_oob_sim = treeshap_obj[[2]]$shaps[,-6]
shap_avs_oob_sim <- shap_vals_oob_sim %>% abs() %>% colMeans()
shap_avs_in_sim <- shap_vals_in_sim %>% abs() %>% colMeans()
shap_vals_oob <- rbind(shap_vals_oob,shap_vals_oob_sim)
shap_vals_in <- rbind(shap_vals_in,shap_vals_in_sim)
shap_avs_oob <- rbind(shap_avs_oob,shap_avs_oob_sim)
shap_avs_in <- rbind(shap_avs_in,shap_avs_in_sim)
###Raw treeshap calculation with original treeshap::treeshap function
shap_obj = treeshap(unified,data)
shap_vals_sim = shap_obj$shaps[,-6]
shap_avs_sim = shap_vals_sim %>% abs() %>% colMeans()
shap_vals = rbind(shap_vals,shap_vals_sim)
shap_avs = rbind(shap_avs,shap_avs_sim)
}
print(Sys.time()-time)
return(list(shap_vals_oob[-1,],shap_vals_in[-1,],shap_avs_oob[-1,],shap_avs_in[-1,],shap_vals[-1,],shap_avs[-1,]))
}
power_sim = data_simulation(n = 120,M = 10,relevance = 0.15)
library(dplyr)
power_sim = data_simulation(n = 120,M = 10,relevance = 0.15)
shap_vals_oob <- power_sim[[1]]
shap_vals_in <- power_sim[[2]]
shap_avs_oob <- power_sim[[3]]
shap_avs_in <- power_sim[[4]]
shap_vals <- power_sim[[5]]
shap_avs <- power_sim[[6]]
model = ranger(y~x,data,num.trees = ntree,classification=T,keep.inbag =T)
library(dplyr)
library(ranger)
library(treeshap)
source("sim_utils.R")
source("sim_utils_ML.R")
lowup = function(unif,row,lower,upper,df){
obs = unif[row,]
df = rbind(df,c(lower,upper,obs$Node))
split = obs$Split
if (!is.na(split)){
df = lowup(unif,obs$Yes,lower,split,df)
df = lowup(unif,obs$No,split,upper,df)
}
return(df)
}
splitter = function(unif){
df = data.frame(lower = NA,upper = NA,Node = NA)
df = lowup(unif,1,-0.51,0.51,df)
df2 <- df[!duplicated(df), ]
df2 <- na.omit(df2)
return(df2)
}
#Data generation setup. 1 variable with uninformative features, 1 variable with results
n = 200
ntree = 1
nCat = 20
a = c(-(1:(nCat/2)),1:(nCat/2))/nCat#unique values
M = 100
#x = rnorm(n)#full data
x = sample(a,n,replace=TRUE)
data = data.frame(x = x)
data$y = rbinom(n,1,prob=0.5)
p_F = MSE_in=MSE_oob = matrix(NA,nrow = M,ncol = 50)
model = ranger(y~x,data,num.trees = ntree,classification=T,keep.inbag =T)
?ranger
predict(model,data= data,type = "terminalNodes")
pred = predict(model,data= data,type = "terminalNodes")
pred[1]
pred
View(pred)
?emmeans
library("readxl")
library("dplyr")
library("ggplot2")
library("grid")
library("emmeans")
?emmeans
data <- read_xlsx("journal.pbio.3001733.s008.xlsx", sheet = "S3_Data_FigS2")
setwd("D:/Workspaces/hwr_job/reproducible_research/sleep_research")
data <- read_xlsx("journal.pbio.3001733.s008.xlsx", sheet = "S3_Data_FigS2")
#Data between 2001 and 2016
min(data$donation_date)
max(data$donation_date)
#approx 250 for pre,post,and DST. 2200 regular
table(data$Type_of_week)
#Density plot sieht gut aus, wobei ich immer noch etwas verwirrt bin, dass im Original Masse unter 1 liegt
ggplot(data,aes(x = log(daily_donations_mean))) + geom_density(fill = "lightgreen")
lm3 <- glm(log(daily_donations_mean) ~ Type_of_week+Time_of_Day+ Weekend_day+ YEAR+MONTH+DAY_OF_WEEK+Holiday, family="gaussian", data=data)
#mean ist komplett daneben 122 statt gewünschten 82. Processing sei allerdings schon passiert
mean(data$daily_donations_mean)
#Damit kriegen wir tatsächlich die korrekten marginal means. Auch die Signifikanz passt
emmeans(lm3, ~ Type_of_week)
lm3 <- glm(log(daily_donations_mean) ~ Type_of_week+Time_of_Day+ Weekend_day+ YEAR+MONTH+DAY_OF_WEEK+Holiday, family="gaussian", data=data)
data <- read_xlsx("journal.pbio.3001733.s008.xlsx", sheet = "S3_Data_Fig3B")
#mean ist komplett daneben 122 statt gewünschten 82. Processing sei allerdings schon passiert
mean(data$daily_donations_mean)
lm3 <- glm(log(daily_donations_mean) ~ Type_of_week+Time_of_Day+ Weekend_day+ YEAR+MONTH+DAY_OF_WEEK+Holiday, family="gaussian", data=data)
#Damit kriegen wir tatsächlich die korrekten marginal means. Auch die Signifikanz passt
emmeans(lm3, ~ Type_of_week)
?emmeans
summary(lm3)
mean(log(data$daily_donations_mean))
#Damit kriegen wir tatsächlich die korrekten marginal means. Auch die Signifikanz passt
emmeans(lm3, ~ Type_of_week)
data <- read_xlsx("journal.pbio.3001733.s008.xlsx", sheet = "S3_Data_FigS2")
#Density plot sieht gut aus, wobei ich immer noch etwas verwirrt bin, dass im Original Masse unter 1 liegt
ggplot(data,aes(x = log(daily_donations_mean))) + geom_density(fill = "lightgreen")
data2 <- read_xlsx("journal.pbio.3001733.s008.xlsx", sheet = "S3_Data_Fig3B")
#mean ist komplett daneben 122 statt gewünschten 82. Processing sei allerdings schon passiert
mean(data2$daily_donations_mean)
lm3 <- glm(log(daily_donations_mean) ~ Type_of_week+Time_of_Day+ Weekend_day+ YEAR+MONTH+DAY_OF_WEEK+Holiday, family="gaussian", data=data2)
#Damit kriegen wir tatsächlich die korrekten marginal means. Auch die Signifikanz passt
emmeans(lm3, ~ Type_of_week)
summary(lm3)
###Plot C
#Mit selber Strategie wie zuvor kommen wir hier voran. Emmeans berechnen und die CIs davon nutzen. Das sieht gut aus
data_c1 <- read_excel("journal.pbio.3001733.s008.xlsx", sheet = "S3_Data_Fig3C_top")
data_c2 <- read_excel("journal.pbio.3001733.s008.xlsx", sheet = "S3_Data_Fig3C_bottom")
#Verschieben um die relevante Woche, damit es um 0 zentriert ist
w_dst = data_c1[data_c1$Type_of_week == "DST_Week",]$WEEK[1]
w_st = data_c2[data_c2$Type_of_week == "ST_Week",]$WEEK[1]
lm4 <- glm(log(daily_donations_mean) ~ as.factor(WEEK), family="gaussian", data=data_c1)
df_3c_up <- summary(emmeans(lm4, ~ WEEK))
lm5 <- glm(log(daily_donations_mean) ~ as.factor(WEEK), family="gaussian", data=data_c2)
df_3c_down <- summary(emmeans(lm5, ~ WEEK))
p1 <- df_3c_up %>%
ggplot(aes(x = WEEK-w_dst,y = emmean)) + geom_line() +  geom_ribbon(aes(ymin = emmean, ymax = upper.CL), alpha = 0.1)
p2 <- df_3c_down %>%
ggplot(aes(x = WEEK-w_st,y = emmean)) + geom_line() +  geom_ribbon(aes(ymin = emmean, ymax = upper.CL), alpha = 0.1)
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
p1 <- df_3c_up %>%
ggplot(aes(x = WEEK-w_dst,y = emmean)) + geom_line() +
geom_ribbon(aes(ymin = emmean, ymax = upper.CL), alpha = 0.1) +
xlim(4.3,4.7)
p2 <- df_3c_down %>%
ggplot(aes(x = WEEK-w_st,y = emmean)) + geom_line() +
geom_ribbon(aes(ymin = emmean, ymax = upper.CL), alpha = 0.1) +
xlim(4.15,4.55)
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
p1 <- df_3c_up %>%
ggplot(aes(x = WEEK-w_dst,y = emmean)) + geom_line() +
geom_ribbon(aes(ymin = emmean, ymax = upper.CL), alpha = 0.1) +
ylim(4.3,4.7)
p2 <- df_3c_down %>%
ggplot(aes(x = WEEK-w_st,y = emmean)) + geom_line() +
geom_ribbon(aes(ymin = emmean, ymax = upper.CL), alpha = 0.1) +
ylim(4.15,4.55)
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
summary(lm4)
summary(lm5)
lm4 <- glm(log(daily_donations_mean) ~ as.factor(WEEK), family="gaussian", data=data_c1)
summary(emmeans(lm4, ~ WEEK))
lm4 <- glm(log(daily_donations_mean) ~ as.factor(WEEK), family="gaussian", data=data_c1)
df_3c_up <- summary(emmeans(lm4, ~ WEEK))
lm5 <- glm(log(daily_donations_mean) ~ as.factor(WEEK), family="gaussian", data=data_c2)
df_3c_down <- summary(emmeans(lm5, ~ WEEK))
p1 <- df_3c_up %>%
ggplot(aes(x = WEEK-w_dst,y = emmean)) + geom_line() +
geom_ribbon(aes(ymin = emmean, ymax = upper.CL), alpha = 0.1) +
ylim(4.3,4.7)
p2 <- df_3c_down %>%
ggplot(aes(x = WEEK-w_st,y = emmean)) + geom_line() +
geom_ribbon(aes(ymin = emmean, ymax = upper.CL), alpha = 0.1) +
ylim(4.15,4.55)
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
summary(lm3)
#Damit kriegen wir tatsächlich die korrekten marginal means. Auch die Signifikanz passt
emmeans(lm3, ~ Type_of_week)
lm4 <- glm(log(daily_donations_mean) ~ as.factor(WEEK), family="gaussian", data=data_c1)
df_3c_up <- summary(emmeans(lm4, ~ WEEK))
lm5 <- glm(log(daily_donations_mean) ~ as.factor(WEEK), family="gaussian", data=data_c2)
df_3c_down <- summary(emmeans(lm5, ~ WEEK))
summary(lm4)
lm6 <- glm(log(daily_donations_mean) ~ Type_of_week, family = "gaussian",data = data_c1)
summary(lm6)
View(data_c1)
data_c1_transf <- data_c1 %>% mutate(weektype = Type_of_week == w_dst)
lm6 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c1)
lm6 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c1_transf)
summary(lm6)
data_c1_transf
table(data_c1_transf$weektype)
w_dst
table(data_c1$WEEK == 11)
data_c1_transf <- data_c1 %>% mutate(weektype = WEEK == w_dst)
lm6 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c1_transf)
summary(lm6)
data_c1_transf <- data_c1 %>% mutate(weektype = WEEK == w_st)
lm7 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c2_transf)
summary(lm7)
data_c2_transf <- data_c1 %>% mutate(weektype = WEEK == w_st)
lm7 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c2_transf)
summary(lm7)
data_c2_transf
data_c2_transf <- data_c2 %>% mutate(weektype = WEEK == w_st)
lm7 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c2_transf)
summary(lm7)
data_c1_transf <- data_c1 %>% mutate(weektype = WEEK == w_dst)
lm6 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c1_transf)
summary(lm6)
lm6 <- glm(log(daily_donations_mean) ~ Type_of_week, family="gaussian", data=data_c1_transf)
summary(lm6)
df_3c_up
data_c1_transf <- data_c1 %>% mutate(weektype = WEEK == w_dst)
lm6 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c1_transf)
summary(lm6)
data_c2_transf <- data_c2 %>% mutate(weektype = WEEK == w_st)
lm7 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c2_transf)
summary(lm7)
p1 <- df_3c_up %>%
ggplot(aes(x = WEEK-w_dst,y = emmean)) + geom_line() +
geom_ribbon(aes(ymin = emmean, ymax = upper.CL), alpha = 0.1) +
ylim(4.3,4.7)
p2 <- df_3c_down %>%
ggplot(aes(x = WEEK-w_st,y = emmean)) + geom_line() +
geom_ribbon(aes(ymin = emmean, ymax = upper.CL), alpha = 0.1) +
ylim(4.15,4.55)
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
summary(lm7)
lm7 <- glm(log(daily_donations_mean) ~ Type_of_week, family="gaussian", data=data_c2_transf)
summary(lm7)
lm7 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c2_transf)
summary(lm7)
df_3c_down
df_3c_up
data_c1_transf <- data_c1 %>% mutate(weektype = WEEK == w_dst)
lm6 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c1_transf)
summary(lm6)
?lme4
?glm
#Damit kriegen wir tatsächlich die korrekten marginal means. Auch die Signifikanz passt
emmeans(lm3, ~ Type_of_week)
summary(lm3)
data_c1_transf <- data_c1 %>% mutate(weektype = WEEK == w_dst)
lm6 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c1_transf)
summary(lm6)
data_c2_transf <- data_c2 %>% mutate(weektype = WEEK == w_st)
lm7 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c2_transf)
summary(lm7)
p1 <- df_3c_up %>%
ggplot(aes(x = WEEK-w_dst,y = emmean)) + geom_line() +
geom_ribbon(aes(ymin = emmean, ymax = upper.CL), alpha = 0.1) +
ylim(4.3,4.7)
p2 <- df_3c_down %>%
ggplot(aes(x = WEEK-w_st,y = emmean)) + geom_line() +
geom_ribbon(aes(ymin = emmean, ymax = upper.CL), alpha = 0.1) +
ylim(4.15,4.55)
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
lm6 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c1_transf)
summary(lm6)
data_c1
columns(data)
data_c2
data_c2_transf <- data_c2 %>% mutate(weektype = WEEK == w_st)
lm7 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c2_transf)
summary(lm7)
lm6 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c1_transf)
summary(lm6)
data_c2_transf <- data_c2 %>% mutate(weektype = WEEK == w_st)
lm7 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c2_transf)
summary(lm7)
data_c2
summary(emmeans(lm5, ~ WEEK))
data <- read_xlsx("journal.pbio.3001733.s008.xlsx", sheet = "S3_Data_FigS2")
columns(data)
column(data)
colnames(data)
data2 <- read_xlsx("journal.pbio.3001733.s008.xlsx", sheet = "S3_Data_Fig3B")
colnames(data2)
boxplot(data2$daily_donations_mean~data2$DAY_OF_WEEK)
boxplot(log(data2$daily_donations_mean)~data2$DAY_OF_WEEK)
data2
View(data2)
data_c2_transf <- data_c2 %>% mutate(weektype = WEEK == w_st)
lm7 <- glm(log(daily_donations_mean) ~ weektype, family="gaussian", data=data_c2_transf)
summary(lm7)
data2 <- read_xlsx("journal.pbio.3001733.s008.xlsx", sheet = "S3_Data_Fig3B")
#mean ist komplett daneben 122 statt gewünschten 82. Processing sei allerdings schon passiert
mean(data2$daily_donations_mean)
lm3 <- glm(log(daily_donations_mean) ~ Type_of_week+Time_of_Day+ Weekend_day+ YEAR+MONTH+DAY_OF_WEEK+Holiday, family="gaussian", data=data2)
#Damit kriegen wir tatsächlich die korrekten marginal means. Auch die Signifikanz passt
emmeans(lm3, ~ Type_of_week)
summary(lm3)
View(data2)
colnames(data2)
library(lubridate)
?days
?yday
yday(data2$donation_date)
temp <- data2 %>% mutate(dayofyear = yday(donation_date))
temp %>% aggregate(log(daily_donations_mean)~dayofyear,FUN = mean)
aggregate(log(daily_donations_mean)~dayofyear,FUN = mean,data = temp)
temp2 <- aggregate(log(daily_donations_mean)~dayofyear,FUN = mean,data = temp)
plot(temp2$dayofyear,temp2$`log(daily_donations_mean)`)
unique(data2$donation_date)
unique(data$donation_date)
library(lubridate)
temp <- data %>% mutate(dayofyear = yday(donation_date))
temp2 <- aggregate(log(daily_donations_mean)~dayofyear,FUN = mean,data = temp)
plot(temp2$dayofyear,temp2$`log(daily_donations_mean)`)
x = as.date("01-01-2001")
x = as.Date("01-01-2001")
x+200
Sys.Date()
x = as.Date("2001-01-01")
x+200
x+365
x+200
plot(as.Date("2001-01-01")+temp2$dayofyear,temp2$`log(daily_donations_mean)`)
abline(v = as.Date("2001-03-15"),color = "red")
abline(v = as.Date("2001-03-15"),col = "red")
abline(v = as.Date("2001-11-15"),col = "blue")
plot(as.Date("2001-01-01")+temp2$dayofyear,temp2$`log(daily_donations_mean)`,type="l")
abline(v = as.Date("2001-03-15"),col = "red")
abline(v = as.Date("2001-11-15"),col = "blue")
summary(lm3)
lm3 <- glm(log(daily_donations_mean) ~ Type_of_week+Time_of_Day+ Weekend_day+ YEAR+as.factor(MONTH)+DAY_OF_WEEK+Holiday, family="gaussian", data=data2)
#Damit kriegen wir tatsächlich die korrekten marginal means. Auch die Signifikanz passt
emmeans(lm3, ~ Type_of_week)
summary(lm3)
lm3 <- glm(log(daily_donations_mean) ~ Type_of_week+Time_of_Day+ Weekend_day+ as.factor(YEAR)+as.factor(MONTH)+as.factor(DAY_OF_WEEK)+Holiday, family="gaussian", data=data2)
#Damit kriegen wir tatsächlich die korrekten marginal means. Auch die Signifikanz passt
emmeans(lm3, ~ Type_of_week)
summary(lm3)
year("2021-01-01")
plot(year(data$donation_date),data$`log(daily_donations_mean)`,type="l")
temp3 <- data %>% mutate(year = year(donation_date))
temp3 <- aggregate(log(daily_donations_mean)~year,FUN = mean,data = data)
temp3
temp3 <- aggregate(log(daily_donations_mean)~year,FUN = mean,data = temp3)
plot(temp3$year,temp3$`log(daily_donations_mean)`,type="l")
lm3 <- glm(log(daily_donations_mean) ~ Type_of_week+Time_of_Day+ Weekend_day+ YEAR +as.factor(MONTH)+as.factor(DAY_OF_WEEK)+Holiday, family="gaussian", data=data2)
#Damit kriegen wir tatsächlich die korrekten marginal means. Auch die Signifikanz passt
emmeans(lm3, ~ Type_of_week)
summary(lm3)
data
View(data)
summary(lm3)
lm1 <- lm(log(daily_donations_mean) ~ Type_of_week+Time_of_Day+ Weekend_day+ YEAR +as.factor(MONTH)+as.factor(DAY_OF_WEEK)+Holiday, data=data2)
summary(lm1)
lm1 <- lm(log(daily_donations_mean) ~ Type_of_week+Weekend_day+ YEAR +as.factor(MONTH)+as.factor(DAY_OF_WEEK)+Holiday, data=data2)
#r-sq 0.3719 (ganzes model)
summary(lm1)
lm1 <- lm(log(daily_donations_mean) ~ Type_of_week+Weekend_day+ Time_of_day + YEAR +as.factor(MONTH)+as.factor(DAY_OF_WEEK)+Holiday, data=data2)
lm1 <- lm(log(daily_donations_mean) ~ Type_of_week+Weekend_day+ Time_of_Day + YEAR +as.factor(MONTH)+as.factor(DAY_OF_WEEK)+Holiday, data=data2)
#r-sq 0.3719 (ganzes model) oder 0.36 (ohne time_of_day)
summary(lm1)
lm1 <- lm(log(daily_donations_mean) ~ Type_of_week+Weekend_day + YEAR +as.factor(MONTH)+as.factor(DAY_OF_WEEK)+Holiday, data=data2)
#r-sq 0.3719 (ganzes model) oder 0.36 (ohne time_of_day)
summary(lm1)
sum(data$daily_donations_mean)
